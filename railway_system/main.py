# Программа управления железнодорожной системой
# railway system
# В проекте используются 4 сущности:
# Станции Station, с количеством путей, и типом -- пасажирские или грузовые
# Пути, соединяющие станции Track
# Поезда Train, каждый с уникальным номером, именованием модели, а так же типом вагоном
# грузовые/пассажирские, и соотвестевнно со допустимым тоннажем и кол-вом пассажиров
# Графики schedules (ну или типа строка  врасписании поездов), которые содержат время прибытия и время
# отправления и станции соответственно, ну и также поезд который по этому графику следует.
#
# В программе должна быть БД, и графический интерфейс, который позволит редактировать расписание для
# разных поездов, а также добавлять новые.
# Выводить расписание поездов для запрашиваемой станции
# Добавлять удалять поезда, станции
# Редактивровать расписание для станций
# Позволять рассчитать время пути между двумя выбранными станциями

from GUI import *
from data import WorkingUtils
from SQLite import SQL


class Merger:
    def __init__(self):
        self.sql = SQL()
        self.list_city = self.sql.select_cities()  # вытянули список с городами
# menu1 = input('номер поезда')
# menu2 = input('название поезда')
# menu3 = input('тип поезда')
# menu4 = str()
# menu5_1 = str()
# menu5_2 = str()
# menu6 = str()
# if menu3 == 'Пассажирский':
#     menu4 = input('тип пассажирского поезда')
#     menu5_1 = input('кол-во пассажиров')
#     menu6 = input('кол-во вагонов')
# elif menu3 == 'Грузовой':
#     menu5_2 = input('максимально перевозимый вес')
#     menu6 = input('кол-во вагонов')
#
# obj = WorkingUtils.registration_train(menu1, menu2, menu3, menu4, menu5_1, menu5_2, menu6)
# print(obj.nickname)

if __name__ == "__main__":
    mainMenu = MainMenu()
    mainMenu.mainloop()